type Query {
  guestFeed: [Story!]!
  userFeed: [Story!]!
  filteredStories: [Story!]!
  drafts: [Story!]!
  users: [User!]!
  user(id: ID!): User!
  story(id: ID!): Story!
  draft(id: ID!): Story!
  searchedUsers(query: String!): [User!]!
  searchedStories(query: String!): [Story!]!
  recommendedHashtags: [Hashtag!]!
  me: User!
}

type Mutation {
  signup(
    email: String!
    password: String!
    userName: String!
    hashtags: [String!]!
  ): AuthPayload!
  login(email: String!, password: String!): AuthPayload!
  createStory(
    title: String!
    content: String!
    hashtags: [String!]!
    published: Boolean!
  ): Story!
  createDraft(
    title: String!
    content: String!
    hashtags: [String!]!
    published: Boolean!
  ): Story!
  publish(
    id: String!
    title: String!
    content: String!
    hashtags: [String!]!
  ): Story!
  updateBio(bio: String!): User!
  updateUserName(userName: String!): User!
  updateEmail(email: String!): User!
  updatePassword(password: String!): User!
  followUser(id: String!): User!
  favoriteStory(id: String!): Story!
  # like(id: String!): Story!
  deleteUser(email: String!): User!
}

type Subscription {
  feedSubscription: Story
}

type AuthPayload {
  token: String!
  user: User!
}

type User {
  id: ID!
  userName: String!
  email: String!
  bio: String
  hashtags: [Hashtag!]!
  stories: [Story]!
  drafts: [Story]!
  favoriteStories: [Story]!
  following: [User]
  followers: [User]
}

type Story {
  id: ID!
  createdAt: String!
  author: User!
  title: String!
  content: String!
  hashtags: [Hashtag!]!
  likes: [User!]!
  loves: [User!]!
  neutrals: [User!]!
  sads: [User!]!
  claps: [User!]!
  published: Boolean!
}

type Hashtag {
  id: ID!
  createdAt: String!
  name: String!
}
